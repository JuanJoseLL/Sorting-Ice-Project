//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Sorter.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

public class Block implements java.lang.Cloneable,
                              java.io.Serializable
{
    public java.util.List<java.lang.String> data;

    public Block()
    {
    }

    public Block(java.util.List<java.lang.String> data)
    {
        this.data = data;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Block r = null;
        if(rhs instanceof Block)
        {
            r = (Block)rhs;
        }

        if(r != null)
        {
            if(this.data != r.data)
            {
                if(this.data == null || r.data == null || !this.data.equals(r.data))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Demo::Block");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, data);
        return h_;
    }

    public Block clone()
    {
        Block c = null;
        try
        {
            c = (Block)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        if(this.data == null)
        {
            ostr.writeSize(0);
        }
        else
        {
            ostr.writeSize(this.data.size());
            for(String elem : this.data)
            {
                ostr.writeString(elem);
            }
        }
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.data = new java.util.ArrayList<String>();
        final int len0 = istr.readAndCheckSeqSize(1);
        for(int i0 = 0; i0 < len0; i0++)
        {
            String elem;
            elem = istr.readString();
            this.data.add(elem);
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Block v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Block ice_read(com.zeroc.Ice.InputStream istr)
    {
        Block v = new Block();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Block> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Block v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Block> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Block.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Block _nullMarshalValue = new Block();

    /** @hidden */
    public static final long serialVersionUID = -3593502624277597930L;
}
